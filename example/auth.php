<?php

require_once("../src/OAuth-PHP.php");

/**
 *
 * U1 PHP auth example
 * This example was taken from Dropbox PHP (http://www.dropbox-php.com/) and adjusted
 * to work with U1 PHP.
 */

// The name of your application or website
$consumerName = 'U1 PHP Example';

/* there is no consumer token and consumer secret because there is only the global Ubuntu One
   consumerToken "ubuntuone" with the consumer secret "hammertime" which is used by U1 PHP by default */

/* This should be set to a page on your website. This URL is used by Ubuntu One to redirect the
   user after the authentication process. Ubuntu One calls this page with two URL encoded parameters
    * oauth_request, the request token generated by getRequestToken() and
    * oauth_verifier, a token that is used by getAccessToken() */
$callbackURL = 'http://google.com';

$oauth = new U1_OAuth_PHP($consumerName);

// We need to start a session
session_start();

// There are multiple steps in this workflow, we keep a 'state number' here
if (isset($_SESSION['state'])) {
    $state = $_SESSION['state'];
} else {
    $state = 1;
}

echo "<a href=\"auth.php?restart=1\">Restart authentication process</a><br /><br />";

if (isset($_REQUEST['restart'])) {
    $state = 1;
}

switch ($state) {

    /* In this phase we grab the initial request tokens
       and redirect the user to the 'authorize' page hosted
       on dropbox */
    case 1:
        echo "<p>Step 1: Acquire request tokens<br />";
        $tokens = $oauth->getRequestToken($callbackURL);
        echo "Request token: " . $tokens['token'] . "<br />Secret: " . $tokens['token_secret'] . "</p>";

        $url = $oauth->getAuthorizeUrl();
        echo "<p>Step 2: You must now redirect the user to <a href=\"" . $url . "\">". $url . "</a>.<br />";
        echo "After the authentication, Ubuntu One redirects you to the callback url provided by you.";
        echo "Please copy the oauth_verifier parameter value and paste it into the input box which appears";
        echo "after reloading this page.</p>";
        
        $_SESSION['state'] = 2;
        $_SESSION['oauth_tokens'] = $tokens;
        die();

    case 2:
        echo "<form action=\"\" method=\"GET\">Verifier code: <input name=\"verifier\" type=\"text\" /><input type=\"submit\" /></form>";
        $_SESSION['state'] = 3;

    /* In this phase, the user just came back from authorizing
       and we're going to fetch the real access tokens */
    case 3:
        echo "Step 4: Acquiring access tokens<br />";
        $oauth->setToken($_SESSION['oauth_tokens']);
        $tokens = $oauth->getAccessToken($_REQUEST['verifier']);
        $_SESSION['state'] = 4;
        $_SESSION['oauth_tokens'] = $tokens;
        // There is no break here, intentional

    /* This part gets called if the authentication process
       already succeeded. We can use our stored tokens and the api 
       should work. Store these tokens somewhere, like a database */
    case 4:
        echo "<p>The user is authenticated<br />";
        echo "You should really save the oauth tokens somewhere, so the first steps will no longer be needed</p>";
        $tokens = $_SESSION['oauth_tokens'];
        echo "Access token: " . $tokens['token'] . ", secret: " . $tokens['token_secret'];
        $oauth->setToken($_SESSION['oauth_tokens']);
        break;
}
